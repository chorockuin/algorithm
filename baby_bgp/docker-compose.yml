version: '3.7'  # Docker Compose 파일의 구성 버전. 기능 호환성과 문법을 정의함. 3.7은 Docker Engine 18.06.0+에서 지원됨.

services:  # 컨테이너로 실행할 서비스(컨테이너 단위)들을 정의하는 최상위 블록
  router01:  # 첫 번째 서비스의 이름. docker-compose 실행 시 컨테이너 이름은 기본적으로 <프로젝트명>_router01 이 됨.
    build:  # 이 서비스는 이미지 대신 Dockerfile로부터 직접 이미지를 빌드함
      context: .  # Dockerfile이 위치한 디렉토리 경로. 일반적으로 현재 디렉토리('.')를 의미함
      dockerfile: Dockerfile.router01  # 사용할 Dockerfile의 이름. 기본은 'Dockerfile'이지만 이렇게 사용자 지정 가능
    networks:  # 이 서비스가 연결될 사용자 정의 네트워크(들)를 지정함
      dreamhack_net:  # 아래에 정의된 'dreamhack_net' 네트워크에 연결됨
    cap_add:  # 컨테이너에 부가적인 Linux 기능(capability)을 부여함
      - NET_RAW     # ICMP ping 같은 원시 소켓을 사용하는 기능을 허용
      - NET_ADMIN   # 네트워크 관련 관리자 권한 부여. 예: IP 할당, 라우팅 테이블 수정 등

  router02:  # 두 번째 서비스 정의
    build:  # 이미지 대신 직접 빌드
      context: .  # 현재 디렉토리에서 빌드
      dockerfile: Dockerfile.router02  # 이 서비스 전용 Dockerfile 사용
    ports:  # 호스트와 컨테이너 간의 포트 포워딩 설정
      - "22:22"  # 호스트의 22번 포트를 컨테이너의 22번 포트(보통 SSH)에 연결
    networks:  # 동일한 사용자 정의 네트워크 사용
      dreamhack_net:
    cap_add:  # 동일하게 관리자 권한 부여
      - NET_RAW
      - NET_ADMIN

networks:  # 사용자 정의 네트워크 설정 블록
  dreamhack_net:  # 네트워크 이름. 각 서비스에서 이 이름을 참조함
    driver: bridge  # Docker의 기본 네트워크 드라이버인 브리지 네트워크 사용
    ipam:  # IP 주소 관리를 위한 설정 블록(IP Address Management)
      config:  # 여러 IP 서브넷 또는 게이트웨이 등을 정의할 수 있음
        - subnet: 192.168.0.0/24  # 사용할 IP 대역 (CIDR 형식)
          gateway: "192.168.0.254"  # 이 네트워크의 게이트웨이 IP. 컨테이너가 외부와 통신할 때 경유하게 됨
